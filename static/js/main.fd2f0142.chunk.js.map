{"version":3,"sources":["styles/colors.ts","styles/fonts.ts","reportWebVitals.ts","router/routes.ts","components/TimerClock.tsx","components/TimerDisplay.tsx","controllers/TimerController.tsx","views/TestView.tsx","router/AppRouter.tsx","index.tsx"],"names":["Colors","FontFamilies","FontWeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ROUTES","test","TimerClockMode","getHours","time","hours","getMinutes","minutes","getSeconds","seconds","getTimer","mode","HMS","HM","MS","TimerClock","Container","styled","div","main","w300","black","white","TimerDisplay","clockMode","isRunning","onClick","TimerController","useState","passed","setPassed","segment","setSegment","setIsRunning","Date","startedTime","setStartedTime","interval","useCallback","getTime","useEffect","x","setInterval","clearInterval","TestView","AppRouter","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd2f0142.chunk.js","sourcesContent":["export enum Colors {\n  black = '#000000',\n  white = '#FFFFFF',\n}\n","export enum FontFamilies {\n  main = 'FontMain',\n}\n\nexport enum FontWeight {\n  w100 = '100',\n  w200 = '200',\n  w300 = '300',\n  w400 = '400',\n  w500 = '500',\n  w600 = '600',\n  w700 = '700',\n  w800 = '800',\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const ROUTES = {\n  test: `/`,\n};\n\nexport default ROUTES;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\nimport { Colors } from '../styles/colors';\nimport { FontFamilies, FontWeight } from '../styles/fonts';\n\nconst getHours = (time: Date) => {\n  const hours = time.getHours();\n  return hours < 10 ? `0${hours}` : hours;\n};\n\nconst getMinutes = (time: Date) => {\n  const minutes = time.getMinutes();\n  return minutes < 10 ? `0${minutes}` : minutes;\n};\n\nconst getSeconds = (time: Date) => {\n  const seconds = time.getSeconds();\n  return seconds < 10 ? `0${seconds}` : seconds;\n};\n\nexport enum TimerClockMode {\n  HMS = 'HMS',\n  HM = 'HM',\n  MS = 'MS',\n}\n\nconst getTimer = (mode: TimerClockMode, time: Date) => {\n  switch (mode) {\n    case TimerClockMode.HMS:\n      return getHours(time) + ':' + getMinutes(time) + ':' + getSeconds(time);\n    case TimerClockMode.HM:\n      return getHours(time) + ':' + getMinutes(time);\n    case TimerClockMode.MS:\n      return getMinutes(time) + ':' + getSeconds(time);\n  }\n};\n\nexport interface TimerClockProps {\n  mode: TimerClockMode;\n  time: Date;\n}\n\nexport const TimerClock: FC<TimerClockProps> = ({ mode, time }) => {\n  return (\n    <Container>\n      {getTimer(mode, time)}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: inline;\n  font-family: ${FontFamilies.main};\n  font-weight: ${FontWeight.w300};\n  font-size: 36px;\n  background-color: ${Colors.black};\n  color: ${Colors.white};\n`;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\nimport { TimerClock, TimerClockMode } from './TimerClock';\n\nexport interface TimerDisplayProps {\n  clockMode: TimerClockMode;\n  time: Date;\n  isRunning: boolean;\n  onClick: Function;\n}\n\nexport const TimerDisplay: FC<TimerDisplayProps> = ({ clockMode, time, isRunning, onClick }) => {\n  return (\n    <Container>\n      <TimerClock mode={clockMode} time={time} />\n\n      <button onClick={() => onClick()}>\n        {isRunning ? 'Pause' : 'Start'}\n      </button>\n\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n`;\n","import React, { FC, useCallback, useEffect, useState } from 'react';\n\nimport { TimerClockMode } from '../components/TimerClock';\nimport { TimerDisplay } from '../components/TimerDisplay';\n\nexport interface TimerControllerProps {\n}\n\nexport const TimerController: FC<TimerControllerProps> = () => {\n  const [ passed, setPassed ] = useState(0);\n  const [ segment, setSegment ] = useState(0);\n  const [ isRunning, setIsRunning ] = useState(false);\n  const [ startedTime, setStartedTime ] = useState(new Date());\n\n  const handleOnClick = () => {\n    if (isRunning) {\n      setIsRunning(false);\n      setPassed(passed + segment);\n      setSegment(0);\n    } else {\n      setIsRunning(true);\n      setSegment(0);\n      setStartedTime(new Date());\n    }\n  };\n\n  const interval = useCallback(() => {\n    if (isRunning) {\n      setSegment(new Date().getTime() - startedTime.getTime());\n    }\n  }, [ isRunning, startedTime ]);\n\n  useEffect(() => {\n    const x = setInterval(interval, 1000);\n    return () => clearInterval(x);\n  }, [ interval ]);\n\n  return (\n    <TimerDisplay\n      clockMode={TimerClockMode.MS}\n      time={new Date(passed + segment)}\n      isRunning={isRunning}\n      onClick={handleOnClick}\n    />\n  );\n};\n","import React from 'react';\n\nimport { TimerController } from '../controllers/TimerController';\n\nexport default function TestView() {\n  return (\n    <>\n      <div>Test View</div>\n      <br />\n      <TimerController />\n      <br />\n      <TimerController />\n      <br />\n      <TimerController />\n      <br />\n      <TimerController />\n    </>\n  );\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport ROUTES from './routes';\nimport TestView from '../views/TestView';\n\nexport default function AppRouter() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path={ROUTES.test} component={TestView} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from './reportWebVitals';\nimport { AppRouter } from './router';\n\nimport './styles/font.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppRouter />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}